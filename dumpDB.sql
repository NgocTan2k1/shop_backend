-- Create schema Shop.
DROP DATABASE IF EXISTS `Shop`;
CREATE DATABASE `Shop`;

-- Create M_USERS table.
DROP TABLE IF EXISTS `Shop`.`M_USERS`;
CREATE TABLE `Shop`.`M_USERS` (
  `USER_ID` VARCHAR(36) NOT NULL,
  `USER_FIRST_NAME` VARCHAR(12) NOT NULL,
  `USER_LAST_NAME` VARCHAR(36) NOT NULL,
  `USER_NAME` VARCHAR(36) NOT NULL,
  `USER_EMAIL` VARCHAR(64) NOT NULL,
  `USER_PASSWORD` VARCHAR(64) NOT NULL,
  `USER_PHONE_NUMBER` VARCHAR(10) NOT NULL,
  `USER_ADDRESS` VARCHAR(64) NOT NULL,
  `USER_DELETE_FLG` INT NOT NULL,
  `USER_CREATED_AT` BIGINT NOT NULL,
  `USER_CREATED_AT_SYSTEM` TIMESTAMP NOT NULL,
  `USER_UPDATED_AT` BIGINT NOT NULL,
  `USER_UPDATED_AT_SYSTEM` TIMESTAMP NOT NULL,
  PRIMARY KEY (`USER_ID`),
  UNIQUE INDEX `USER_ID_UNIQUE` (`USER_ID` ASC) VISIBLE,
  UNIQUE INDEX `USER_NAME_UNIQUE` (`USER_NAME` ASC) VISIBLE,
  UNIQUE INDEX `USER_EMAIL_UNIQUE` (`USER_EMAIL` ASC) VISIBLE
);

-- Create M_ROLES table.
DROP TABLE IF EXISTS `Shop`.`M_ROLES`;
CREATE TABLE `Shop`.`M_ROLES` (
  `ROLE_ID` INT NOT NULL,
  `ROLE_NAME` VARCHAR(16) NOT NULL,
  `ROLE_DELETE_FLG` INT NOT NULL,
  `ROLE_CREATED_AT` BIGINT NOT NULL,
  `ROLE_CREATED_AT_SYSTEM` TIMESTAMP NOT NULL,
  `ROLE_UPDATED_AT` BIGINT NOT NULL,
  `ROLE_UPDATED_AT_SYSTEM` TIMESTAMP NOT NULL,
  PRIMARY KEY (`ROLE_ID`),
  UNIQUE INDEX `ROLE_ID_UNIQUE` (`ROLE_ID` ASC) VISIBLE
);

-- Create R_USER_ROLES table.
DROP TABLE IF EXISTS `Shop`.`R_USERS_ROLES`;
CREATE TABLE `Shop`.`R_USERS_ROLES` (
  `USER_ID` VARCHAR(36) NOT NULL,
  `ROLE_ID` INT NOT NULL,
  `DELETE_FLG` INT NOT NULL,
  `CREATED_AT` BIGINT NOT NULL,
  `CREATED_AT_SYSTEM` TIMESTAMP NOT NULL,
  `UPDATED_AT` BIGINT NOT NULL,
  `UPDATED_AT_SYSTEM` TIMESTAMP NOT NULL,
  PRIMARY KEY (`USER_ID`, `ROLE_ID`),
  FOREIGN KEY (`USER_ID`) REFERENCES `Shop`.`M_USERS`(`USER_ID`),
  FOREIGN KEY (`ROLE_ID`) REFERENCES `Shop`.`M_ROLES`(`ROLE_ID`)
);

-- Add foreign keys R_USER_ROLES table.
ALTER TABLE `Shop`.`R_USERS_ROLES`
	ADD CONSTRAINT `FK_R_USERS_ROLE` FOREIGN KEY (`USER_ID`) REFERENCES `Shop`.`M_USERS`(`USER_ID`) ON DELETE CASCADE,
	ADD CONSTRAINT `FK_R_ROLES_USER` FOREIGN KEY (`ROLE_ID`) REFERENCES `Shop`.`M_ROLES`(`ROLE_ID`);

-- ========== TRIGGERS ==========
-- Update R_USERS_ROLES when a M_ROLES's row is deleted.
DROP TRIGGER IF EXISTS `Shop`.`before_delete_role`;
DELIMITER $$
CREATE TRIGGER `Shop`.`before_delete_role`
BEFORE DELETE ON `Shop`.`M_ROLES`
FOR EACH ROW
BEGIN
    -- Update DELETE_FLG in R_USER_ROLES if row is deleted
    UPDATE `Shop`.`R_USERS_ROLES`
    SET `DELETE_FLG` = 1 -- The value will change
    WHERE `ROLE_ID` = OLD.ROLE_ID;
END$$
DELIMITER ;

-- Update R_USERS_ROLES when ROLE_DELETE_FLG or ROLE_ID of M_ROLES's field is change.
DROP TRIGGER IF EXISTS `Shop`.`after_update_roles`;
DELIMITER $$
CREATE TRIGGER `Shop`.`after_update_roles`
AFTER UPDATE ON `Shop`.`M_ROLES`
FOR EACH ROW
BEGIN
	IF OLD.ROLE_DELETE_FLG = 0 AND NEW.ROLE_DELETE_FLG = 1 THEN
        -- Update DELETE_FLG to 1 when ROLE_DELETE_FLG is changed to 1
        UPDATE `Shop`.`R_USERS_ROLES`
        SET `DELETE_FLG` = 1 -- The value will change
        WHERE `ROLE_ID` = OLD.ROLE_ID;

    ELSEIF OLD.ROLE_ID != NEW.ROLE_ID THEN
        -- Update ROLE_ID in R_USER_ROLES if ROLE_ID is changed
        UPDATE `Shop`.`R_USERS_ROLES`
        SET `ROLE_ID` = NEW.ROLE_ID -- The value will change
        WHERE `ROLE_ID` = OLD.ROLE_ID;
    END IF;
END$$
DELIMITER ;

-- Update R_USERS_ROLES when USER_DELETE_FLG of M_USERS's field is change.
DROP TRIGGER IF EXISTS `Shop`.`after_update_user`;
DELIMITER $$
CREATE TRIGGER `Shop`.`after_update_user`
AFTER UPDATE ON `Shop`.`M_USERS`
FOR EACH ROW
BEGIN
	IF OLD.USER_DELETE_FLG = 0 AND NEW.USER_DELETE_FLG = 1 THEN
        -- Update DELETE_FLG to 1 when USER_DELETE_FLG is changed to 1
        UPDATE `Shop`.`R_USERS_ROLES`
        SET `DELETE_FLG` = 1 -- The value will change
        WHERE `USER_ID` = OLD.USER_ID;
    END IF;
END$$
DELIMITER ;